
	
!@Git初始化
git config user.name "qpyghb"
git config user.email "1323668359@qq.com"
git init

!@Git忽略文件
cat .gitignore		//*.[oa] 、 *~
/*	
	Git忽略文件（过滤器）
	Git档案库下的.gitignore文件
	所有空行或者以注释符号 ＃ 开头的行都会被 Git 忽略。
	可以使用标准的 glob 模式匹配。						
	匹配模式最后跟反斜杠（/）说明要忽略的是目录。
	要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。
	#glob模式
	（!）取反；
	星号（*）匹配零个或多个任意字符； 
	[abc] 匹配任何一个列在方括号中的字符；
	问号（?）只匹配一个任意字符；
	如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到9 的数字）
*/	

!@Git查看状态
git status				//查看git状态， 未跟踪untracked/未更新unmodified/更新modified/暂存staged
git diff				//查看未暂存的和已提交的差异
git diff --cached		//查看已暂存的和已提交的差异
git diff --staged

!@Git提交
git commit						//打开文本编辑器，保存退出后提交
git commit -m 'description'		//直接提交 暂存的文件
git commit -a -m 'description'	//直接提交 已跟踪的文件自动暂存，不用add

!@Git移除
git rm test.txt				//删除文件并放入暂存， 如果之前文件修改后暂存过， 需要加上 -f 强制删除
git rm --cached test.txt	//删除提交版本库的文件，本地文件不删除
git rm log/\*.log			//删除log文件夹下的所有log后缀文件，加'\'则会递归遍历当前目录和所有子目录
	
!@Git查看历史
git log	[-p] [-n] 			//加上-p显示每次提交的差异， -2表示显示最近N次提交
git log --pretty=oneline	//一行显示一次提交	
git log --pretty=format:"%h - %an, %ar : %s"	
/*	
	常用参数
	选项 说明
	-p 按补丁格式显示每个更新之间的差异。
	--stat 显示每次更新的文件修改统计信息。
	--shortstat 只显示 --stat 中最后的行数修改添加移除统计。
	--name-only 仅在提交信息后显示已修改的文件清单。
	--name-status 显示新增、修改、删除的文件清单。
	--abbrev-commit 仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。
	--relative-date 使用较短的相对时间显示（比如，“2 weeks ago”）。
	--graph 显示 ASCII 图形表示的分支合并历史。
	--pretty 使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。
	-(n) 仅显示最近的 n 条提交
	--since, --after 仅显示指定时间之后的提交。
	--until, --before 仅显示指定时间之前的提交。
	--author 仅显示指定作者相关的提交。
	--committer 仅显示指定提交者相关的提交。
	
	--all-match 全匹配
	
	格式化说明
	选项 说明
	%H 提交对象（commit）的完整哈希字串		
	%h 提交对象的简短哈希字串
	%T 树对象（tree）的完整哈希字串
	%t 树对象的简短哈希字串
	%P 父对象（parent）的完整哈希字串
	%p 父对象的简短哈希字串
	%an 作者（author）的名字
	%ae 作者的电子邮件地址
	%ad 作者修订日期（可以用 -date= 选项定制格式）
	%ar 作者修订日期，按多久以前的方式显示
	%cn 提交者(committer)的名字
	%ce 提交者的电子邮件地址
	%cd 提交日期
	%cr 提交日期，按多久以前的方式显示
	%s 提交说明
*/

		
	
!@Other

ssh-keygen -t rsa -C "youremail@example.com"	//创建密匙, 如果找不到命令， 找到 Git/usr/bin 目录下的 ssh-keygen.exe(如果找不到，可以在计算机全局搜索)，将路径放入path环境变量中
git config --list
git add *.txt

git clone git://github.com/schacon/grit.git mygrit
git config --global core.editor		//设置编辑软件
git mv test.txt test				//文件改名	
git commit --amend		//重新提交上次的提交，可以新增暂存	
git reset HEAD test.txt				//取消暂存的文件到unstage	
git checkout --	test.txt			//重置文件的修改

	
	
	
	
	
	
	
	
	
	
	
	
	

